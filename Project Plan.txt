Fallback Backup via Google Drive for Chart Data

Main Takeaway:  
Implement a Google Drive–based fallback so that if any live data source (FRED, Eurostat, CSV imports) fails, charts automatically load from a pre-saved historical backup stored on Drive.



 How It Works

1. On Indicator Creation (or Manual Snapshot):  
   - Fetch full historical series from all configured sources.  
   - Serialize to a CSV or JSON file named with the indicator’s slug and date (e.g., `gdp-2025-09-11.csv`).  
   - Upload that file to a designated folder in your Google Drive via the Drive API.

2. Live Chart Rendering:  
   - When a user requests a chart, the plugin first attempts to fetch fresh data from live sources (FRED, Eurostat, CSV imports).  
   - If the live fetch succeeds, render the chart normally—and in the background optionally update the Drive backup.  
   - If the live fetch fails (timeout, 5xx error, no response), the plugin falls back to retrieving the last backup file from Google Drive and uses that dataset.

3. Retention & Cleanup:  
   - Keep a configurable number of backup files per indicator (e.g., last 7 snapshots).  
   - Optionally delete older backups from Drive to manage storage.



 Required Components

1. Google Drive Integration  
   - Use Google’s PHP Drive API client to authenticate (OAuth service account or API key) and upload/download files.  
   - Store credentials securely in plugin settings.

2. Backup Trigger  
   - Hook into indicator creation/update and scheduled cron jobs.  
   - Generate CSV/JSON from `zc_data_points` table for that indicator.  
   - Upload to Drive folder named for the indicator.

3. Fallback Logic in Charts Class  
   - Wrap live‐data fetch calls in try/catch.  
   - On exception or empty result, call Drive API to download the most recent backup file.  
   - Parse and pass that data to the chart renderer.

4. Settings UI  
   - On the Settings page, add fields for:  
     - Google Drive credentials (JSON key or OAuth).  
     - Drive folder ID for backups.  
     - Number of backups to retain.  
     - Enable/disable fallback feature.



---------------------------------------------------------------------------------------------------------------------
Manual Calculations

Implement a comprehensive calculations module with the following capabilities:

- Support arithmetic operations and built-in functions: SUM, AVG, MIN, MAX, COUNT.  
- Add advanced technical functions per indicator:  
  -  Rate of Change (ROC) percentage  
  -  Momentum (current value minus N-period value)  
  -  Stochastic Oscillator (%K and %D lines)  
  -  Rolling Correlation between any two indicators  
  -  Linear Regression Slope over a defined window  
  -  Coefficient of Determination (R²) for fit quality  
  -  Maximum Drawdown and Drawdown Duration  
  -  Sharpe Ratio and Sortino Ratio  
  -  Weighted composite index combining multiple indicators with user-defined weights  
  -  Multi-condition Boolean signals (e.g., `EMA(12)>EMA(26) AND RSI<30`)  
  -  Seasonal adjustments (year-over-year and month-over-month percentage changes)  

Design a Formula Builder UI featuring a categorized function palette, autocomplete, live syntax validation, and chart preview options for single-value or time-series outputs. Store definitions and results in `zc_calculations`, and provide run, edit, delete actions for each calculation. Each indicator’s calculations are managed and displayed independently via shortcodes logic (dynamic or static).

---------------------------------------------------------------------------------

“Chart Rendering Module Prompt:

Implement the `class-charts.php` system to mirror the modular, theme-agnostic design of the Zestra-Capital-Charts project. The module must:

- Prepare datasets in PHP for both indicators and manual calculations, outputting JSON-ready series.  
- Render charts on the frontend using a pluggable JavaScript engine (e.g., Chart.js or Highcharts), selectable via shortcode attributes or global settings.  
- Support two distinct shortcode types for each dataset slug:  
  -  Dynamic shortcode `[zc_chart_dynamic id="SLUG" library="chartjs" options="…"]` – displays interactive charts with search, date-range filter, and comparison controls.  
  -  Static shortcode `[zc_chart_static id="SLUG"]` – displays a locked snapshot of the chart without UI controls, excluded from dynamic registries.  
  - Timeframes: 3m 6m 1y 2y 3y 5y 10y 15y 20y 25y all
  
  use this link for chart design: https://github.com/zestracapital/Zestra-Capital-Charts
  
- Ensure responsive design and easy styling overrides by loading minimal CSS and exposing container classes.  
- Architect the system so chart UI libraries can be swapped or upgraded independently of data-preparation logic.  
- Provide error handling for missing data or failed API calls, optionally falling back to Google Drive backups if enabled.”

--------------------------------------------------------------------------------------

"Importer Module Prompt:

Enhance `class-csv-importer.php` to support flexible data inputs with comprehensive UI:

- File Upload: CSV, XLSX, JSON, XML files.  
- URL Fetch: direct file URLs (CSV/XLSX/JSON/XML), Google Sheets export links, or REST API endpoints with optional headers/parameters.  
- Admin Import Page UI: tabbed interface with sections for File Upload and URL Fetch, unified form to select input type, dropdown to map imported data to existing indicators, column mapping interface for date/value fields, and import progress bar with real-time status updates.  
- Robust parsing: validate headers, display clear error messages, and process rows into `zc_data_points`, ensuring idempotency (skip or overwrite existing entries).  
- Support large imports via WP-Cron fallback with progress feedback.  
- Secure actions with nonces and capability checks.  
- Log import summaries and errors via `class-error-logger.php` and present a post-import report showing rows processed, errors encountered, and success rate."

--------------------------------------------------------------------------------------------

**Free Data Sources to Include**  

- Eurostat  
- FRED (St. Louis Fed)  
- World Bank Open Data  
- OECD Public Data  
- DBnomics (public datasets)  
- Yahoo Finance (historical CSV)  
- Google Finance (quotes API)  
- Canadian Open Data Portal (ZIP→CSV workflow)  
- Google Sheets (export CSV links)  

**Data Sources Module Prompt**  
Enhance `class-data-sources.php` to manage multiple free external feeds:

1. Prebuilt integrations for Eurostat, FRED, World Bank, OECD, DBnomics, Yahoo Finance, Google Finance, Canadian Open Data (with ZIP-to-CSV extraction), and Google Sheets.  
2. Custom source option: direct ZIP URL import—download, in-memory unzip, and parse contained CSVs.  
3. Admin UI: list configured feeds with fields for API keys or URLs, “Test Connection” buttons, and edit/delete actions.  
4. Validate and save credentials/parameters in the database; display the last successful fetch timestamp.  
5. Expose each source as a selectable option when mapping imports or scheduling auto-fetches for indicators.  
6. Secure all actions with nonces and capability checks; log connectivity tests and fetch errors via `class-error-logger.php`.

For ZIP file

Automated ZIP-to-Google-Sheets pipeline that runs on a schedule rather than on each chart load.

1. ZIP Fetch & Unzip  
   - Schedule a WP-Cron job (hourly, daily, etc.) that downloads the ZIP from its URL.  
   - Unzip in memory or to a temp folder, extract the contained CSV(s), then delete the ZIP and temp files immediately.

2. Google Sheets Update  
   - Use Google Sheets API with a service account credential stored in plugin settings.  
   - For each extracted CSV, convert its rows into the Sheets API’s bulk update payload.  
   - Overwrite or append to a designated sheet tab named for the indicator or data source.

3. Sheets as Data Source  
   - Once the sheet is updated, treat its “export as CSV” URL as a live data source.  
   - Your existing Importer or Data Sources module can fetch from the sheet link on demand whenever you need fresh data in the plugin.

4. Scheduling & Configuration  
   - In the Data Sources settings, allow the user to specify:  
     -  ZIP file URL  
     -  Google Sheets spreadsheet ID and target tab name  
     -  Cron frequency (hourly, twice daily, daily)  
   - Provide a “Run Now” button to test and trigger the pipeline manually.

5. Cleanup & Security  
   - After successful sheet update, delete any temp files.  
   - Log each run (success, rows processed, errors) via `class-error-logger.php`.  
   - Protect the API endpoints and WP-Cron hook with nonces and capability checks.

With this in place, your plugin will automatically keep a Google Sheet in sync with the latest unzipped data on your chosen schedule—and then fetch from that sheet for charting or further processing.

---------------------------------------------------------------------------------------------

“Error Logger Module Prompt

Enhance `class-error-logger.php` to provide robust error tracking and alerts:

- Centralize logging for all modules: backup, imports, data sources, calculations, charts, and API interactions.  
- Capture error context (module name, action, input parameters, timestamp) and write to a dedicated database table `zc_error_logs` with fields: `id`, `module`, `action`, `message`, `context` (JSON), `created_at`.  
- Provide methods for different log levels: `info()`, `warning()`, `error()`, and `critical()`.  
- For `critical()` logs, automatically send an email alert to the site administrator via SMTP, including the error message, context details, and timestamp.  
- Integrate with WordPress’ built-in logging where appropriate and support fallback to a log file in the plugin’s `logs/` folder if the database is unavailable.  
- Expose an Admin Logs page listing recent errors with filters by module and date range, and options to export logs as CSV.  
- Ensure logging and email-sending actions include nonces and capability checks when triggered via the UI.

----------------------------------------------------------------------------------------------------

“Indicators Module Prompt:

Enhance `class-indicators.php` to provide a robust, user-friendly management system with flexible data formatting and shortcode support:

1. CRUD Operations  
   - Methods: `add_indicator()`, `get_indicator()`, `update_indicator()`, `delete_indicator()`.  
   - Validation & sanitization of all inputs (name, slug, source, description).  
   - Ensure the “Add Indicator” button at the top of the Indicators admin page navigates directly to the Add Indicator form.

2. Flexible Data Formatting  
   - Normalize imported data from diverse sources (Eurostat, FRED, CSV, JSON, XML) by auto-detecting date formats (YYYY-MM-DD, DD/MM/YYYY) and numeric formats (comma vs dot separators).  
   - Provide configurable parsing rules (date format, thousand separator) per source to handle mismatches seamlessly.

3. Shortcode Generation  
   - For each indicator, auto-generate two shortcodes:  
     -  Dynamic: `[zc_chart_dynamic id="SLUG"]`  
     -  Static: `[zc_chart_static id="SLUG"]`  
   - Display shortcode snippets and a “Copy” button in the indicator list and edit screens.

4. Admin UI & Navigation  
   - Indicators List Table with columns: Name, Short Description (max 50 words), Slug, Source, Shortcodes, Last Fetch, Actions (Edit, Delete).  
   - Bulk actions: Delete, Fetch Data.  
   - On “Add Indicator” click, redirect to the Add form; after save, return to list with success notice.

5. Extensibility & Hooks  
   - Filters: `zc_indicators_before_save`, `zc_indicators_after_delete`.  
   - Actions: `zc_indicator_created`, `zc_indicator_updated`, `zc_indicator_deleted`.

6. Error Handling & Logging  
   - Catch and log all exceptions via `class-error-logger.php`.  
   - On data fetch or format errors, store context (source, raw data sample) and continue without breaking other indicators.

7. REST API & Caching  
   - Provide helper methods for REST endpoints.  
   - Cache indicator lists in transients for 5 minutes to reduce database load.

Implement these features to ensure reliable indicator management, seamless data formatting, and easy embedding via shortcodes.

-------------------------------------------------------------------------------------------------------------------

“Add Indicator Page UI Prompt:

Design the Add Indicator admin page with a clear, form-driven layout and intuitive navigation:

1. Page Header  
   - Title: “Add New Indicator”  
   - Primary Button: “Back to Indicators List” at top-left, linking to the main list.  

2. Form Structure  
   - **Indicator Details Section**  
     -  Name (text input)  
     -  Slug (auto-generated from Name, editable)  
     -  Short Description (textarea, 50-word limit with counter)  
     -  Source Type (dropdown: CSV Upload, URL Fetch, Eurostat, World Bank, OECD, DBnomics, Google Sheets)  

   - **Source Configuration Section** (dynamic fields based on Source Type)  
     -  CSV Upload: file selector or URL input  
     -  URL Fetch: URL input + headers JSON textarea  
     -  API Sources: dataset ID input + optional date-range pickers  
     -  Google Sheets: spreadsheet export-CSV link  

   - **Data Parsing Options**  
     -  Date Format (dropdown or custom format string)  
     -  Number Format (decimal separator, thousand separator)  

3. Shortcode Settings  
   - Checkboxes: “Enable Dynamic Chart Shortcode” and “Enable Static Chart Shortcode”  
   - Display generated shortcodes beneath, with “Copy” buttons.  

4. Success & Validation  
   - Real-time validation: highlight missing required fields with inline error messages.  
   - Save Buttons at bottom: “Save Indicator” and “Save & Add Another.”  

5. User Guidance  
   - Contextual help icons next to each field, showing tooltips with examples.  
   - Collapsible “Advanced Settings” panel for optional fields (caching duration, fetch schedule).  

6. Security  
   - Nonce field embedded in form.  
   - Capability check to ensure only authorized users see the page.  

This UI ensures users can quickly define and configure new indicators with all necessary parsing rules, source settings, and shortcode options in one cohesive form.

-----------------------------------------------------------------------------------------------------

“Dashboard Page UI Prompt:

Design the plugin’s Dashboard page as an at-a-glance control center with summary widgets and quick actions:

1. Page Header  
   - Title: “ZC DMT Dashboard”  
   - Primary Action Button: “Add New Indicator” (prominent, top-right), linking to the Add Indicator page.  

2. Summary Widgets (at top, in a responsive grid of 3 or 4 columns)  
   - Total Indicators: shows count with a “View All” link  
   - Recent Calculations: latest 5 entries (name and date) with “Manage Calculations” link  
   - Pending Imports: number of queued or failed imports with “Go to Importer” link  
   - Backup Status: date/time of last successful backup and “Run Backup Now” button  

3. Quick Charts Preview  
   - Tabbed panel for: Indicators, Calculations  
   - In each tab, display up to 3 small chart thumbnails for the most recent items, each with its name and date range.  
   - Clicking a thumbnail opens the full chart in a modal or navigates to its page.

4. Activity Log Section  
   - Scrollable list of recent plugin events (imports, backups, fetch errors) with timestamps and severity icons (info, warning, error).  
   - “View Full Logs” link to Admin Logs page.

5. Data Source Health  
   - Table listing each configured data source (Eurostat, FRED, etc.) with status badge (Healthy, Warning, Error) based on last fetch.  
   - “Test Connection” buttons inline for each row.

6. Footer Widgets  
   - Plugin Version and update alerts (“Update available” notification)  
   - Link to Documentation and Support  

7. Design Considerations  
   - Responsive layout adapting from 4-column desktop to stacked mobile  
   - Use WordPress Dashicons and consistent color codes for statuses  
   - Load widgets asynchronously for fast initial render  

This Dashboard provides users with immediate insights into indicator counts, recent activities, system health, and quick access to core features.

------------------------------------------------------------------------------------------------------

“REST API Module Prompt:

Enhance `class-rest-api.php` to provide comprehensive, secure endpoints for plugin data:

1. Namespace & Versioning  
   - Use namespace `zc-dmt/v1` and support future versions (e.g., `v2`) without breaking existing integrations.

2. Endpoints  
   - **GET /indicators**: returns all indicators with metadata (id, name, slug, description, source, last_fetch_time).  
   - **GET /indicators/{id}**: returns a single indicator’s details and configuration.  
   - **GET /indicators/{id}/data-points?start={date}&end={date}**: returns time-series data for the indicator within optional date range.  
   - **GET /calculations**: returns all manual calculations with definitions and last result.  
   - **GET /calculations/{id}**: returns a specific calculation’s formula, output type, and result series.  
   - **GET /charts/{slug}?type={dynamic|static}&library={chartjs|highcharts}**: returns prepared chart dataset JSON for the specified slug and chart type.

3. Permission & Authentication  
   - Public read access for data retrieval endpoints (apply nonce or JWT if necessary for external apps).  
   - Admin-only write endpoints (e.g., POST/PUT/DELETE for indicators and calculations) protected by capability checks and nonces.

4. Input Validation & Sanitization  
   - Validate path and query parameters (e.g., date formats, slugs).  
   - Return appropriate HTTP status codes and error messages for invalid or missing inputs.

5. Response Formatting  
   - Consistent JSON structure:  
     { “status”: “success”, “data”: { … }, “meta”: { pagination or timestamp } }  
   - Include pagination metadata for endpoints returning large datasets.

6. Caching  
   - Use WordPress object cache or transients to cache frequent GET responses for a configurable duration to improve performance.

7. Extensibility  
   - Provide filter hooks before sending responses (e.g., `zc_rest_prepare_indicator`) for custom modifications.  
   - Action hooks after create/update/delete operations (e.g., `zc_rest_indicator_created`) for audit logging or external sync.

Implement these enhancements to transform the plugin’s REST API into a robust service layer suitable for both internal use and external integrations.

-------------------------------------------------------------------------------------------------------------------------------------

“Database Module Prompt:

Enhance `class-database.php` to establish and manage a robust schema for all plugin data:

1. Schema Creation & Versioning  
   - On plugin activation, create or update tables:  
     -  `zc_indicators` (id, name, slug, description, source_type, source_config JSON, created_at, updated_at)  
     -  `zc_data_points` (id, indicator_id FK, date DATE, value DECIMAL, created_at)  
     -  `zc_calculations` (id, name, formula, output_type ENUM('single','series'), result JSON, created_at)  
     -  `zc_error_logs` (id, module, action, message, context JSON, created_at)  
   - Maintain a `zc_schema_version` option to apply incremental migrations on updates.

2. Indexes & Constraints  
   - Add primary keys and foreign key constraint on `zc_data_points.indicator_id` referencing `zc_indicators.id`.  
   - Composite index on (`indicator_id`,`date`) for efficient time-series queries.  
   - Unique index on `zc_indicators.slug` to prevent duplicates.

3. Migration Support  
   - Implement a versioned migration system that applies ALTER TABLE statements when schema_version increases.  
   - Log successful migrations and handle rollbacks on failure.

4. Data Integrity & Sanitization  
   - Ensure all inputs are sanitized and prepared via `$wpdb->prepare()`.  
   - Validate date and numeric formats before insertion.

5. Backup & Restore Hooks  
   - Expose methods `export_tables(array $tables)` and `import_tables(array $tableFiles)` for backup routines.  
   - Integrate with the Backup module to snapshot and restore CSV exports.

6. Utility Methods  
   - Provide helper functions:  
     -  `get_row($table, $where)` and `get_results($query, $args)` for generic retrieval.  
     -  `insert($table, $data)` and `update($table, $data, $where)` with automatic timestamp handling.  
     -  `delete($table, $where)` for cleanup operations.

7. Error Handling & Logging  
   - Wrap all database operations in try/catch; on exception, invoke the Error Logger.  
   - Return meaningful error messages or codes for upstream handling.

Implement these features to ensure a solid, version-controlled foundation for storing indicators, data points, calculations, and logs, supporting migrations, backups, and reliable data integrity.


-------------------------------------------------------------------------------------------------------------

“History Page Module Prompt:

Enhance `admin/history.php` to provide a comprehensive activity log for import and backup operations:

- Retrieve entries from `zc_error_logs` filtered by modules: ‘Import’, ‘Backup’.  
- Display a table with columns: Date/Time, Module, Action Description, Status (Success/Error), and Details (error messages or row counts).  
- Add filter controls at the top to toggle views: All, Imports, Backups, Errors.  
- Include a “Clear History” button with nonce protection to purge displayed log entries.  
- Support pagination and search by date range or action type.  
- Ensure only users with the appropriate capability (‘manage_options’) can access and clear history.

----------------------------------------------------------------------------------------------------

Design the Data Sources UI so that **each source type** has its own dedicated configuration panel based on the data it provides. For every source you add—Eurostat, World Bank, OECD, DBnomics, CSV/ZIP, Google Sheets, Google Finance, Yahoo Finance—you will receive different fields and formats (JSON paths, CSV columns, ZIP contents, API parameters, sheet tabs, symbol and date ranges, etc.).  

When the user selects a source type, dynamically display only the controls needed to capture that source’s data requirements:  
- field inputs (codes, URLs, symbols),  
- parsing options (date format, number format, header rows),  
- mapping interfaces (CSV columns or JSON/XML paths),  
- filters and date pickers,  
- test-fetch buttons and mapping previews.  

Instruct the Labs team: “Build each UI panel strictly to match the data structure of its source. When a source is selected, load its specific form fields and parsing options. Do not reuse one generic UI for all—each source’s unique inputs and workflows must be reflected in its own panel.”

Include an optional **Date Range** selector in every Data Source panel so users can specify how many years or months of historical data to fetch. When configuring a source—whether CSV/ZIP, API, or Google Sheets—display a pair of inputs:

- **Look-Back Period**: dropdown to choose a preset range (1 month, 3 months, 6 months, 1 year, 2 years, 5 years, All).  
- **Custom Range**: date pickers for “Start Date” and “End Date.”  

Make these fields optional: if left blank, the source fetches its full available history. Ensure the chosen range is passed to the import logic—API queries or CSV filters—so only the specified time window is imported.

“Settings Page UI Prompt:

Design the plugin’s Settings page to centralize global configurations with clear sections, tooltips, and save functionality:

1. Page Header  
   - Title: “ZC DMT Settings”  
   - Primary Save Button: “Save Changes” fixed at top-right (sticky on scroll).

2. Sections (accordion or tabbed layout):

   a. **General**  
     - Default Time Zone (dropdown of PHP date zones)  
     - Default Date Format (text input with preview)  
     - Default Number Format (decimal/thousand separator selectors)  
     - Cache Duration (dropdown: 1, 5, 15, 30 minutes)  

   b. **Backup & Fallback**  
     - Enable Google Drive Fallback (toggle)  
     - Google Drive Folder ID (text input)  
     - Service Account JSON Upload (file selector)  
     - Backup Retention Count (number input)  
     - Backup Schedule (dropdown: hourly, twice daily, daily)  

   c. **Chart Engine**  
     - Default Library (radio buttons: Chart.js, Highcharts)  
     - Enable Dynamic Charts (toggle)  
     - Enable Static Charts (toggle)  
     - Default Chart Options JSON (textarea for advanced settings)  

   d. **Importer & Data Fetch**  
     - Default Import Chunk Size (number of rows per batch)  
     - Enable WP-Cron Fallback for Large Imports (toggle)  
     - Default Fetch Look-Back (dropdown presets)  

   e. **Error Logging & Alerts**  
     - Log Level (dropdown: Info, Warning, Error, Critical)  
     - Enable Email Alerts for Critical Errors (toggle)  
     - Admin Alert Email Address (email input)  
     - SMTP Settings Link (link to WP Mail SMTP settings)  

   f. **Advanced & Developer**  
     - REST API Version (display only)  
     - Debug Mode (toggle; writes verbose logs)  
     - Clear All Caches Button  
     - Schema Version (display only)  

3. UI Elements & Feedback  
   - Accordions or tabs collapse/expand, with the active section highlighted.  
   - Inline tooltips (help icons) explaining each setting.  
   - Validation on email fields and numeric inputs, with inline errors.  
   - “Save Changes” button disabled until changes are detected; show “Settings saved” notice on success.  

4. Security  
   - Nonce field for the settings form.  
   - Capability check: only users with `manage_options` can view and edit settings.

This layout ensures plugin administrators can configure global behaviors—backups, chart engines, data-fetch defaults, and alerts—quickly and accurately.

“Chart Security Layer Prompt:

Implement a secure key-based access control for chart data endpoints:

1. Key Management  
   - Generate and store random access keys in plugin settings under a new **API Keys** section.  
   - Allow administrators to create, label, and revoke keys via the Settings page.  

2. Request Validation  
   - For all chart shortcodes and REST endpoints serving dynamic or static chart data, require a valid key parameter (e.g., `?access_key=YOUR_KEY`).  
   - Before preparing or rendering chart data, verify the provided key against stored keys.  
   - If the key is missing or invalid, return an HTTP 403 response with an error message and do not expose any data.  

3. Internal System Bypass  
   - Recognize internal requests (e.g., from the same WordPress site) by checking a special internal flag or nonce; allow these to bypass key validation.  

4. Settings UI  
   - In the **Settings → Security** section, add an **API Keys** panel:  
     -  List existing keys with labels, creation dates, and “Revoke” actions.  
     -  “Add New Key” button to generate a new random key and label it.  
     -  Instructions on including the `access_key` parameter in chart shortcodes or REST requests.  

5. Logging & Alerts  
   - Log all failed access attempts via `class-error-logger.php` at warning level, including timestamp, requested endpoint, and IP address.  
   - Optionally, notify administrators of repeated failed attempts in the Error Logging settings.

By enforcing this key-based access control, only authorized requests—either internal or bearing a valid API key—will successfully load chart data.

# Additional Considerations and Enhancements

Even with a comprehensive plan, a few areas can further strengthen the plugin’s robustness, usability, and maintainability:

**1. Automated Testing**  
-  Unit Tests for core classes (Indicators, Data Sources, Calculations, Database) to verify CRUD, parsing, and error-handling logic.  
-  Integration Tests for end-to-end workflows (import → data-point ingestion → chart rendering).  
-  UI/Acceptance Tests (e.g., with Cypress or PHPUnit + WP-Browser) to catch regressions in forms and shortcodes.

**2. Internationalization & Localization**  
-  Wrap all user-facing strings in translation functions (`__()`, `_e()`).  
-  Provide a POT file so the plugin can be localized for non-English environments (e.g., Roman Urdu labels).

**3. Performance & Scaling**  
-  Lazy-load chart assets and defer non-critical scripts to minimize page-load impact.  
-  Batch large imports into adjustable chunk sizes with progress indicators.  
-  Monitor long-running CRON jobs and allow administrators to cancel stuck tasks.


**5. Documentation & Onboarding**  
-  In-plugin guided walkthrough (e.g., using Shepherd.js) to help new users configure their first indicator, data source, and chart.  
-  Detailed README with code examples for developers using the REST API and shortcodes.

**6. Backup Restoration & Versioning**  
-  UI to restore historical CSV backups from Google Drive or local storage.  
-  Versioned snapshots of calculation definitions so users can roll back to previous formula versions.

**7. Accessibility (a11y)**  
-  Ensure all admin pages and chart output follow WCAG guidelines (proper ARIA labels, keyboard navigation).  
-  High-contrast chart color palettes and alternative data tables for screen readers.

Incorporating these elements will help deliver a polished, resilient, and user-friendly plugin that scales with your future feature roadmap.